### YamlMime:ManagedReference
items:
- uid: Ubiety.Scram.Core.Hash
  commentId: T:Ubiety.Scram.Core.Hash
  id: Hash
  parent: Ubiety.Scram.Core
  children:
  - Ubiety.Scram.Core.Hash.ComputeHash(System.Byte[])
  - Ubiety.Scram.Core.Hash.ComputeHash(System.Byte[],System.Byte[])
  - Ubiety.Scram.Core.Hash.ComputeHash(System.Byte[],System.Collections.Generic.IEnumerable{System.Byte},System.Int32)
  - Ubiety.Scram.Core.Hash.Sha1
  - Ubiety.Scram.Core.Hash.Sha256
  langs:
  - csharp
  - vb
  name: Hash
  nameWithType: Hash
  fullName: Ubiety.Scram.Core.Hash
  type: Class
  source:
    remote:
      path: src/Ubiety.Scram.Core/Hash.cs
      branch: master
      repo: git@github.com:ubiety/Ubiety.Scram.Core
    id: Hash
    path: ../../src/Ubiety.Scram.Core/Hash.cs
    startLine: 35
  assemblies:
  - Ubiety.Scram.Core
  namespace: Ubiety.Scram.Core
  summary: "\nHashing methods.\n"
  example: []
  syntax:
    content: public class Hash
    content.vb: Public Class Hash
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: Ubiety.Scram.Core.Hash.Sha1
  commentId: M:Ubiety.Scram.Core.Hash.Sha1
  id: Sha1
  parent: Ubiety.Scram.Core.Hash
  langs:
  - csharp
  - vb
  name: Sha1()
  nameWithType: Hash.Sha1()
  fullName: Ubiety.Scram.Core.Hash.Sha1()
  type: Method
  source:
    remote:
      path: src/Ubiety.Scram.Core/Hash.cs
      branch: master
      repo: git@github.com:ubiety/Ubiety.Scram.Core
    id: Sha1
    path: ../../src/Ubiety.Scram.Core/Hash.cs
    startLine: 50
  assemblies:
  - Ubiety.Scram.Core
  namespace: Ubiety.Scram.Core
  summary: "\nGets a new SHA1 based hash.\n"
  example: []
  syntax:
    content: public static Hash Sha1()
    return:
      type: Ubiety.Scram.Core.Hash
      description: <xref href="Ubiety.Scram.Core.Hash" data-throw-if-not-resolved="false"></xref> set to use SHA1.
    content.vb: Public Shared Function Sha1 As Hash
  overload: Ubiety.Scram.Core.Hash.Sha1*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Ubiety.Scram.Core.Hash.Sha256
  commentId: M:Ubiety.Scram.Core.Hash.Sha256
  id: Sha256
  parent: Ubiety.Scram.Core.Hash
  langs:
  - csharp
  - vb
  name: Sha256()
  nameWithType: Hash.Sha256()
  fullName: Ubiety.Scram.Core.Hash.Sha256()
  type: Method
  source:
    remote:
      path: src/Ubiety.Scram.Core/Hash.cs
      branch: master
      repo: git@github.com:ubiety/Ubiety.Scram.Core
    id: Sha256
    path: ../../src/Ubiety.Scram.Core/Hash.cs
    startLine: 59
  assemblies:
  - Ubiety.Scram.Core
  namespace: Ubiety.Scram.Core
  summary: "\nGets a new SHA256 hash.\n"
  example: []
  syntax:
    content: public static Hash Sha256()
    return:
      type: Ubiety.Scram.Core.Hash
      description: <xref href="Ubiety.Scram.Core.Hash" data-throw-if-not-resolved="false"></xref> set to use SHA256.
    content.vb: Public Shared Function Sha256 As Hash
  overload: Ubiety.Scram.Core.Hash.Sha256*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Ubiety.Scram.Core.Hash.ComputeHash(System.Byte[])
  commentId: M:Ubiety.Scram.Core.Hash.ComputeHash(System.Byte[])
  id: ComputeHash(System.Byte[])
  parent: Ubiety.Scram.Core.Hash
  langs:
  - csharp
  - vb
  name: ComputeHash(Byte[])
  nameWithType: Hash.ComputeHash(Byte[])
  fullName: Ubiety.Scram.Core.Hash.ComputeHash(System.Byte[])
  type: Method
  source:
    remote:
      path: src/Ubiety.Scram.Core/Hash.cs
      branch: master
      repo: git@github.com:ubiety/Ubiety.Scram.Core
    id: ComputeHash
    path: ../../src/Ubiety.Scram.Core/Hash.cs
    startLine: 69
  assemblies:
  - Ubiety.Scram.Core
  namespace: Ubiety.Scram.Core
  summary: "\nCompute a hash.\n"
  example: []
  syntax:
    content: public byte[] ComputeHash(byte[] value)
    parameters:
    - id: value
      type: System.Byte[]
      description: bytes to hash.
    return:
      type: System.Byte[]
      description: byte array of the hash output.
    content.vb: Public Function ComputeHash(value As Byte()) As Byte()
  overload: Ubiety.Scram.Core.Hash.ComputeHash*
  nameWithType.vb: Hash.ComputeHash(Byte())
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Ubiety.Scram.Core.Hash.ComputeHash(System.Byte())
  name.vb: ComputeHash(Byte())
- uid: Ubiety.Scram.Core.Hash.ComputeHash(System.Byte[],System.Byte[])
  commentId: M:Ubiety.Scram.Core.Hash.ComputeHash(System.Byte[],System.Byte[])
  id: ComputeHash(System.Byte[],System.Byte[])
  parent: Ubiety.Scram.Core.Hash
  langs:
  - csharp
  - vb
  name: ComputeHash(Byte[], Byte[])
  nameWithType: Hash.ComputeHash(Byte[], Byte[])
  fullName: Ubiety.Scram.Core.Hash.ComputeHash(System.Byte[], System.Byte[])
  type: Method
  source:
    remote:
      path: src/Ubiety.Scram.Core/Hash.cs
      branch: master
      repo: git@github.com:ubiety/Ubiety.Scram.Core
    id: ComputeHash
    path: ../../src/Ubiety.Scram.Core/Hash.cs
    startLine: 80
  assemblies:
  - Ubiety.Scram.Core
  namespace: Ubiety.Scram.Core
  summary: "\nCompute a hash.\n"
  example: []
  syntax:
    content: public byte[] ComputeHash(byte[] value, byte[] key)
    parameters:
    - id: value
      type: System.Byte[]
      description: bytes to hash.
    - id: key
      type: System.Byte[]
      description: Hash key.
    return:
      type: System.Byte[]
      description: byte array of the hash output.
    content.vb: Public Function ComputeHash(value As Byte(), key As Byte()) As Byte()
  overload: Ubiety.Scram.Core.Hash.ComputeHash*
  nameWithType.vb: Hash.ComputeHash(Byte(), Byte())
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Ubiety.Scram.Core.Hash.ComputeHash(System.Byte(), System.Byte())
  name.vb: ComputeHash(Byte(), Byte())
- uid: Ubiety.Scram.Core.Hash.ComputeHash(System.Byte[],System.Collections.Generic.IEnumerable{System.Byte},System.Int32)
  commentId: M:Ubiety.Scram.Core.Hash.ComputeHash(System.Byte[],System.Collections.Generic.IEnumerable{System.Byte},System.Int32)
  id: ComputeHash(System.Byte[],System.Collections.Generic.IEnumerable{System.Byte},System.Int32)
  parent: Ubiety.Scram.Core.Hash
  langs:
  - csharp
  - vb
  name: ComputeHash(Byte[], IEnumerable<Byte>, Int32)
  nameWithType: Hash.ComputeHash(Byte[], IEnumerable<Byte>, Int32)
  fullName: Ubiety.Scram.Core.Hash.ComputeHash(System.Byte[], System.Collections.Generic.IEnumerable<System.Byte>, System.Int32)
  type: Method
  source:
    remote:
      path: src/Ubiety.Scram.Core/Hash.cs
      branch: master
      repo: git@github.com:ubiety/Ubiety.Scram.Core
    id: ComputeHash
    path: ../../src/Ubiety.Scram.Core/Hash.cs
    startLine: 93
  assemblies:
  - Ubiety.Scram.Core
  namespace: Ubiety.Scram.Core
  summary: "\nCompute a hash.\n"
  example: []
  syntax:
    content: public byte[] ComputeHash(byte[] password, IEnumerable<byte> salt, int iterations)
    parameters:
    - id: password
      type: System.Byte[]
      description: byte array of a password.
    - id: salt
      type: System.Collections.Generic.IEnumerable{System.Byte}
      description: byte array of the hash salt.
    - id: iterations
      type: System.Int32
      description: number of times to iterate the hash.
    return:
      type: System.Byte[]
      description: byte array of the hash output.
    content.vb: Public Function ComputeHash(password As Byte(), salt As IEnumerable(Of Byte), iterations As Integer) As Byte()
  overload: Ubiety.Scram.Core.Hash.ComputeHash*
  nameWithType.vb: Hash.ComputeHash(Byte(), IEnumerable(Of Byte), Int32)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Ubiety.Scram.Core.Hash.ComputeHash(System.Byte(), System.Collections.Generic.IEnumerable(Of System.Byte), System.Int32)
  name.vb: ComputeHash(Byte(), IEnumerable(Of Byte), Int32)
references:
- uid: Ubiety.Scram.Core
  commentId: N:Ubiety.Scram.Core
  name: Ubiety.Scram.Core
  nameWithType: Ubiety.Scram.Core
  fullName: Ubiety.Scram.Core
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: Ubiety.Scram.Core.Hash
  commentId: T:Ubiety.Scram.Core.Hash
  parent: Ubiety.Scram.Core
  name: Hash
  nameWithType: Hash
  fullName: Ubiety.Scram.Core.Hash
- uid: Ubiety.Scram.Core.Hash.Sha1*
  commentId: Overload:Ubiety.Scram.Core.Hash.Sha1
  name: Sha1
  nameWithType: Hash.Sha1
  fullName: Ubiety.Scram.Core.Hash.Sha1
- uid: Ubiety.Scram.Core.Hash.Sha256*
  commentId: Overload:Ubiety.Scram.Core.Hash.Sha256
  name: Sha256
  nameWithType: Hash.Sha256
  fullName: Ubiety.Scram.Core.Hash.Sha256
- uid: Ubiety.Scram.Core.Hash.ComputeHash*
  commentId: Overload:Ubiety.Scram.Core.Hash.ComputeHash
  name: ComputeHash
  nameWithType: Hash.ComputeHash
  fullName: Ubiety.Scram.Core.Hash.ComputeHash
- uid: System.Byte[]
  isExternal: true
  name: Byte[]
  nameWithType: Byte[]
  fullName: System.Byte[]
  nameWithType.vb: Byte()
  fullName.vb: System.Byte()
  name.vb: Byte()
  spec.csharp:
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: System.Collections.Generic.IEnumerable{System.Byte}
  commentId: T:System.Collections.Generic.IEnumerable{System.Byte}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<Byte>
  nameWithType: IEnumerable<Byte>
  fullName: System.Collections.Generic.IEnumerable<System.Byte>
  nameWithType.vb: IEnumerable(Of Byte)
  fullName.vb: System.Collections.Generic.IEnumerable(Of System.Byte)
  name.vb: IEnumerable(Of Byte)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Collections.Generic.IEnumerable`1
  commentId: T:System.Collections.Generic.IEnumerable`1
  isExternal: true
  name: IEnumerable<T>
  nameWithType: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
  nameWithType.vb: IEnumerable(Of T)
  fullName.vb: System.Collections.Generic.IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
